// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = "file:./dev.db"
  relationMode = "prisma"
}


model User {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String?
  Booking        Booking[]
  reviews        Review[]
  
}

model Property {
  id              String            @id @default(uuid())
  title           String
  description     String
  location        String
  pricePerNight   Float
  bedroomCount    Int
  bathRoomCount   Int
  maxGuestCount   Int
  hostId          String
  rating          Int
  Booking         Booking[]
  Host            Host            @relation(fields: [hostId], references: [id], onDelete: Cascade)
  amenities       Amenity[]
  reviews         Review []
  PropertyAmenity PropertyAmenity[]

  @@index([hostId])
  
}


model Amenity {
  id              String            @id @default(uuid())
  name            String
  Property        Property[]
  PropertyAmenity PropertyAmenity[]
}

model PropertyAmenity {
  propertyId String
  amenityId  String
  Property   Property               @relation(fields: [propertyId], references: [id],onDelete: Cascade)
  Amenity    Amenity                @relation(fields: [amenityId], references: [id],onDelete: Cascade)

  @@index([propertyId])
  @@id([amenityId])
}

model Host {
  id             String             @id @default(uuid())
  username       String             @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String?
  aboutMe        String
  properties     Property[]
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  rating     Int
  comment    String

  @@index([userId])
  @@index([propertyId])
}

model Booking {
  id             String             @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Int
  bookingStatus  String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}



 